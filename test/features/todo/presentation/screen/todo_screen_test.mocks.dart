// Mocks generated by Mockito 5.4.6 from annotations
// in app_for_test_example/test/features/todo/presentation/screen/todo_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_for_test_example/feartures/todo/data/models/todo_model.dart'
    as _i5;
import 'package:app_for_test_example/feartures/todo/presentation/viewmodels/todo_viewmodel.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeTodosState_1 extends _i1.SmartFake implements _i3.TodosState {
  _FakeTodosState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TodoViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoViewModel extends _i1.Mock implements _i3.TodoViewModel {
  MockTodoViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeNotifierProviderRef<_i3.TodosState> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeNotifierProviderRef_0<_i3.TodosState>(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i2.AutoDisposeNotifierProviderRef<_i3.TodosState>);

  @override
  _i3.TodosState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTodosState_1(this, Invocation.getter(#state)),
          )
          as _i3.TodosState);

  @override
  set state(_i3.TodosState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i3.TodosState build() =>
      (super.noSuchMethod(
            Invocation.method(#build, []),
            returnValue: _FakeTodosState_1(this, Invocation.method(#build, [])),
          )
          as _i3.TodosState);

  @override
  _i4.Future<void> getAllTodos() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTodos, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveTodo(_i5.TodoModel? todo) =>
      (super.noSuchMethod(
            Invocation.method(#saveTodo, [todo]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void listenSelf(
    void Function(_i3.TodosState?, _i3.TodosState)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(_i3.TodosState? previous, _i3.TodosState? next) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}
